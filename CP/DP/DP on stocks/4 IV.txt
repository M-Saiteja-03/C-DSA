You are given an integer array prices where prices[i] is the price of a given stock on the ith day, and an integer k.

Find the maximum profit you can achieve. You may complete at most k transactions: i.e. you may buy at most k times and sell at most k times.

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

Input: k = 2, prices = [2,4,1]
Output: 2
Explanation: Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.

Input: k = 2, prices = [3,2,6,5,0,3]
Output: 7
Explanation: Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. 
Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.

//code

class Solution {
public:
    int f(vector<int>& prices,int i,int t,vector<vector<int>> &dp,int k){
        if(t==2*k) return 0;
        if(i==prices.size()) return 0;
        int profit=0;
        if(dp[i][t]!=-1) return dp[i][t];
        if(t%2==0){
            profit=max(-prices[i]+f(prices,i+1,t+1,dp,k),0+f(prices,i+1,t,dp,k));
        }
        else{
            profit=max(+prices[i]+f(prices,i+1,t+1,dp,k),0+f(prices,i+1,t,dp,k));
        }
        return dp[i][t]=profit;
    }
    int maxProfit(int k, vector<int>& prices) {
        int n=prices.size();
        vector<vector<int>> dp(n,vector<int>(2*k,-1));
        return f(prices,0,0,dp,k);
    }
};