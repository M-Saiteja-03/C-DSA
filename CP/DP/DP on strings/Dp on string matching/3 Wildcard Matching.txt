Given an input string (s) and a pattern (p), implement wildcard pattern matching with support for '?' and '*' where:

'?' Matches any single character.
'*' Matches any sequence of characters (including the empty sequence).
The matching should cover the entire input string (not partial).

Input: s = "aa", p = "a"
Output: false
Explanation: "a" does not match the entire string "aa".

Input: s = "aa", p = "a"
Output: false
Explanation: "a" does not match the entire string "aa".

Input: s = "cb", p = "?a"
Output: false
Explanation: '?' matches 'c', but the second letter is 'a', which does not match 'b'.

//recursion + memoisation

class Solution {
public:
    bool f(int i,int j, string &s,string &p,vector<vector<int>> &dp){
        if(i>=0 && j<0) return false;
        if(i<0 && j>=0){
            for(int x=j;x>=0;x--){
                if(p[x]!='*') return false;
            }
            return true;
        }
        if(i<0 && j<0) return true;
        if(dp[i][j]!=-1) return dp[i][j];
        if(s[i]==p[j] or p[j]=='?'){
            return dp[i][j]=f(i-1,j-1,s,p,dp);
        }
        if(p[j]=='*'){
            return dp[i][j]=f(i-1,j,s,p,dp) or f(i,j-1,s,p,dp);
        }
        return dp[i][j]=false;
        
    }
    bool isMatch(string s, string p) {
        int n=s.size();
        int m=p.size();
        vector<vector<int>> dp(n,vector<int>(m,-1));
        return f(n-1,m-1,s,p,dp);
    }
};
