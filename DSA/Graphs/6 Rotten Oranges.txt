//multi source bfs 

You are given an m x n grid where each cell can have one of three values:

0 representing an empty cell,
1 representing a fresh orange, or
2 representing a rotten orange.
Every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.

Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1.

 

Example 1:


Input: grid = [[2,1,1],[1,1,0],[0,1,1]]
Output: 4
Example 2:

Input: grid = [[2,1,1],[0,1,1],[1,0,1]]
Output: -1
Explanation: The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens
4-directionally.
Example 3:

Input: grid = [[0,2]]
Output: 0
Explanation: Since there are already no fresh oranges at minute 0, the answer is just 0.
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 10
grid[i][j] is 0, 1, or 2.
------------------------------------------------------------------------------------------------------------------------
#1 using bfs {N*M, N*M}

class Solution {
public:
    int bfs(vector<vector<int>>& grid, queue<pair<int,int>> &q,int n,int m){
        vector<int> delrow={-1, 0, 0, 1};
        vector<int> delcol={0, -1, 1, 0};
        int mins=0;

        //bfs(level order traversal)
        while(!q.empty()){
            int size=q.size();
            int flag=0;
            for(int i=0;i<size;i++){
                int row=q.front().first;
                int col=q.front().second;
                q.pop();
                cout<<row<<" "<<col<<endl;
                for(int i=0;i<4;i++){
                    int newr=row+delrow[i];
                    int newc=col+delcol[i];
                    if(newr>=0 && newr<n && newc>=0 && newc<m && grid[newr][newc]==1 && grid[row][col]==2){
                        q.push({newr,newc});
                        grid[newr][newc]=2;
                        flag=1;
                    }
                }
                cout<<q.size()<<endl;
            }

            // if something is inserted in queue only then do mins++ because at last node extra count is happening.
            if(flag) mins++;
        }

        // if any orange is left unroten then return -1
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==1){
                    return -1;
                }
            }
        }

        return mins;
    }
    int orangesRotting(vector<vector<int>>& grid) {
        queue<pair<int,int>> q;
        int n=grid.size();
        int m=grid[0].size();
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==2){
                    q.push({i,j});
                }
            }
        }
        return bfs(grid,q,n,m);
    }
};