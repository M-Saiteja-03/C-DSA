Given a Directed Acyclic Graph of N vertices from 0 to N-1 and a 2D Integer array(or vector) edges[ ][ ] of length M,
where there is a directed edge from edge[i][0] to edge[i][1] with a distance of edge[i][2] for all i.

Find the shortest path from src(0) vertex to all the vertices and if it is impossible to reach any vertex,
then return -1 for that vertex.

Example1:

Input:
N = 4, M = 2
edge = [[0,1,2],[0,2,1]]
Output:
0 2 1 -1
Explanation:
Shortest path from 0 to 1 is 0->1 with edge weight 2. 
Shortest path from 0 to 2 is 0->2 with edge weight 1.
There is no way we can reach 3, so it's -1 for 3.
Example2:

Input:
N = 6, M = 7
edge = [[0,1,2],[0,4,1],[4,5,4],[4,2,2],[1,2,3],[2,3,6],[5,3,1]]
Output:
0 2 3 6 1 5
Explanation:
Shortest path from 0 to 1 is 0->1 with edge weight 2. 
Shortest path from 0 to 2 is 0->4->2 with edge weight 1+2=3.
Shortest path from 0 to 3 is 0->4->5->3 with edge weight 1+4+1=6.
Shortest path from 0 to 4 is 0->4 with edge weight 1.
Shortest path from 0 to 5 is 0->4->5 with edge weight 1+4=5.
Your Task:

You don't need to print or input anything. Complete the function shortest path() which takes an integer N as number of vertices, an integer M as number of edges and a 2D Integer array(or vector) edges as the input parameters and returns an integer array(or vector), denoting the list of distance from src to all nodes.

Expected Time Complexity: O(N+M), where N is the number of nodes and M is edges
Expected Space Complexity: O(N)

Constraint:
1 <= N,M <= 100
0 <= edgei,0,edgei,1 < n
0 <= edgei,2 <=105
---------------------------------------------------------------------------------------------------------------------
Intuition:
Finding the shortest path to a vertex is easy if you already know the shortest paths to all the vertices that can 
precede it. Processing the vertices in topological order ensures that by the time you get to a vertex, 
you’ve already processed all the vertices that can precede it which reduces the computation time significantly. 
In this approach, we traverse the nodes sequentially according to their reachability from the source.

Dijkstra’s algorithm is necessary for graphs that can contain cycles because they can’t be topologically sorted. 
In other cases, the topological sort would work fine as we start from the first node, and then move on to the others 
in a directed manner.

#1 using toposort and relaxation of edges.{V+E , V}--toposort takes (V+E) time and stack loop also takes (V+E) time.

// User function Template for C++
class Solution {
  public:
    void dfs(int src, unordered_map<int,vector<pair<int,int>>> &adj, stack<int> &s,
    vector<bool> &vis){
        vis[src]=true;
        for(node:adj[src]){
            if(!vis[node.first]){
                dfs(node.first,adj,s,vis);  
            }
        }
        s.push(src);
    }
    vector<int> shortestPath(int N,int M, vector<vector<int>>& edges){
        vector<int> dist(N,INT_MAX);
        vector<bool> vis(N,false);
        unordered_map<int,vector<pair<int,int>>> adj;
        for(int i=0;i<edges.size();i++){
            adj[edges[i][0]].push_back({edges[i][1],edges[i][2]});
        }
        stack<int> s;
        for(int i=0;i<N;i++){
            if(!vis[i]){
                dfs(0,adj,s,vis);    
            }
        }
        dist[0]=0;
        while(!s.empty()){
            int cur=s.top();
            s.pop();
            for(auto node:adj[cur]){
                int n=node.first;
                int d=node.second;
                if(dist[cur]+d<dist[n]){
                    dist[n]=dist[cur]+d;
                }
            }
        }
        for(int i=0;i<N;i++){
            if(dist[i]==INT_MAX) dist[i]=-1;
        }
        return dist;
    }
};
---------------------------------------------------------------------------------------------------------------------------