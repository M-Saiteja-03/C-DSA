Given an m x n matrix board containing 'X' and 'O', capture all regions that are 4-directionally surrounded by 'X'.

A region is captured by flipping all 'O's into 'X's in that surrounded region.

Example 1:

Input: board = [["X","X","X","X"],["X","O","O","X"],["X","X","O","X"],["X","O","X","X"]]
Output: [["X","X","X","X"],["X","X","X","X"],["X","X","X","X"],["X","O","X","X"]]
Explanation: Notice that an 'O' should not be flipped if:
- It is on the border, or
- It is adjacent to an 'O' that should not be flipped.
The bottom 'O' is on the border, so it is not flipped.
The other three 'O' form a surrounded region, so they are flipped.
Example 2:

Input: board = [["X"]]
Output: [["X"]]
 

Constraints:

m == board.length
n == board[i].length
1 <= m, n <= 200
board[i][j] is 'X' or 'O'.
-----------------------------------------------------------------------------------------------------------
#1 using bfs { N*M, N*M }

class Solution {
public:
    void bfs(int row,int col, vector<vector<char>>& mat, vector<vector<bool>> &vis){
        int n=mat.size();
        int m=mat[0].size();
        queue<pair<int,int>> q;
        q.push({row,col});
        vis[row][col]=true;
        cout<<mat[row][col]<<endl;
        vector<int> delrow={-1, 0, 0, 1};
        vector<int> delcol={0, -1, 1, 0};
        while(!q.empty()){
            int r=q.front().first;
            int c=q.front().second;
            q.pop();
            for(int i=0;i<4;i++){
                int newr=r+delrow[i];
                int newc=c+delcol[i];
                if(newr>=0 && newr<n && newc>=0 && newc<m && mat[newr][newc]=='O' && !vis[newr][newc]){
                    vis[newr][newc]=true;
                    q.push({newr,newc});
                }
            }
        }
    }
    void solve(vector<vector<char>>& mat) {
        int n=mat.size();
        int m=mat[0].size();
        vector<vector<bool>> vis(n,vector<bool>(m,false));
        for(int i=0;i<m;i++){
            //checking Os is first row
            if(!vis[0][i] && mat[0][i]=='O'){
                bfs(0,i,mat,vis);
            }

            //checking Os is last row
            if(!vis[n-1][i] && mat[n-1][i]=='O'){
                cout<<"hello"<<endl;
                bfs(n-1,i,mat,vis);
            }
        }
        for(int i=0;i<n;i++){
            //checking Os is first col
            if(!vis[i][0] && mat[i][0]=='O'){
                bfs(i,0,mat,vis);
            }
            //checking Os is last col
            if(!vis[i][m-1] && mat[i][m-1]=='O'){
                bfs(i,m-1,mat,vis);
            }
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(!vis[i][j] && mat[i][j]=='O'){
                    mat[i][j]='X';
                }
            }
        }
    }
};
------------------------------------------------------------------------------------------------------------