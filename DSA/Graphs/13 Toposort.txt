Reference:- https://takeuforward.org/data-structure/topological-sort-algorithm-dfs-g-21/

consider an edge u->v, In topological sorting, node u will always appear before node v if there is a 
directed edge from node u towards node v.

Note:- Topo sort can be applied only in DAG's.
-------------------------------------------------------------------------------------------------------------
#1 using dfs {V+E , V}
#include <bits/stdc++.h>
using namespace std;

class Solution {
private:
	void dfs(int node, int vis[], stack<int> &st, vector<int> adj[]) {
		vis[node] = 1;
		for (auto it : adj[node]) {
			if (!vis[it]) dfs(it, vis, st, adj);
		}
		st.push(node);
	}
public:
	//Function to return list containing vertices in Topological order.
	vector<int> topoSort(int V, vector<int> adj[])
	{
		int vis[V] = {0};
		stack<int> st;
		for (int i = 0; i < V; i++) {
			if (!vis[i]) {
				dfs(i, vis, st, adj);
			}
		}

		vector<int> ans;
		while (!st.empty()) {
			ans.push_back(st.top());
			st.pop();
		}
		return ans;
	}
};


int main() {

	//V = 6;
	vector<int> adj[6] = {{}, {}, {3}, {1}, {0, 1}, {0, 2}};
	int V = 6;
	Solution obj;
	vector<int> ans = obj.topoSort(V, adj);

	for (auto node : ans) {
		cout << node << " ";
	}
	cout << endl;

	return 0;
}
--------------------------------------------------------------------------------------------------------------
#2 using bfs [KAHN'S ALGORITHM] {V+E , V}

1. Here we find the indegree of nodes, and the ones initially having indegree 0 will be pushed into queue.
2. then front node is popped and added into res vector and its adj nodes indegree is reduced by 1.
3. if indegree of adj nodes become 0,then they are pushed into queue.

class Solution
{
	public:
	//Function to return list containing vertices in Topological order. 
	vector<int> topoSort(int v, vector<int> adj[]) 
	{
	    vector<int> indeg(v,0);
	    vector<int> res;
	    for(int i=0;i<v;i++){
	        for(int node:adj[i]){
	            indeg[node]++;
	        }
	    }
	    queue<int> q;
	    for(int i=0;i<indeg.size();i++){
	        if(indeg[i]==0){
	            q.push(i);
	        }
	    }
	    
	    while(!q.empty()){
	        int front=q.front();
	        q.pop();
	        res.push_back(front);
	        for(int node:adj[front]){
	            indeg[node]--;
	            if(indeg[node]==0) q.push(node);
	        }
	    }
	    return res;
	}
};
--------------------------------------------------------------------------------------------------------