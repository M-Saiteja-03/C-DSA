Given the head of a linked list and an integer val, remove all the nodes of the linked list that has Node.val == val, 
and return the new head.

Input: head = [1,2,6,3,4,5,6], val = 6
Output: [1,2,3,4,5]

Input: head = [], val = 1
Output: []

Input: head = [7,7,7,7], val = 7
Output: []

Constraints:

The number of nodes in the list is in the range [0, 104].
1 <= Node.val <= 50
0 <= val <= 50
---------------------------------------------------------------------------------------
#1 recursion {N, N}

class Solution {
public:
    ListNode* removeElements(ListNode* head, int val) {
        if(head==NULL) return NULL;
        if(head->val==val){
            return removeElements(head->next,val);
        }
        head->next=removeElements(head->next,val);
        return head;
    }
};
-----------------------------------------------------------------------------------------
#2 {N , 1}

class Solution {
public:
    ListNode* removeElements(ListNode* head, int val) {
        ListNode* cur=head;
        ListNode* prev=new ListNode(-1);
        ListNode* nh=prev;
        prev->next=cur;
        while(cur!=NULL){
            if(cur->val==val){ 
                prev->next=cur->next;
                cur=cur->next;
            }
            else{
                cur=cur->next;
                prev=prev->next;
            }
        }
        return nh->next;
    }
};
--------------------------------------------------------------------------------------------