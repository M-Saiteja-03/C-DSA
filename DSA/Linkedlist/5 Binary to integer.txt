Given head which is a reference node to a singly-linked list. The value of each node in the linked list 
is either 0 or 1. The linked list holds the binary representation of a number.

Return the decimal value of the number in the linked list.

The most significant bit is at the head of the linked list.
Example 1:


Input: head = [1,0,1]
Output: 5
Explanation: (101) in base 2 = (5) in base 10

Example 2:

Input: head = [0]
Output: 0

Constraints:

The Linked List is not empty.
Number of nodes will not exceed 30.
Each node's value is either 0 or 1.

#1 {N+N,N} append LL to string/int and convert it into decimal

#2 {N+N,1} find len of LL and add ans with (ptr->data)*pow(2,n-i);

#3 {N,1} assume curr element as 2^0, if next element exists then multiply before elements value by 2 and add ans with
   (cur->data)*pow(2,0) 

   class Solution {
    public:
    int getDecimalValue(ListNode* head) {
        int ans=0;
        ListNode* ptr=head;
        while(ptr!=NULL){
            ans*=2;
            ans+=(ptr->val)*1;//2^0
            ptr=ptr->next;
        }
        return ans;
    }
};