Given the heads of two singly linked-lists headA and headB, return the node at which the two lists intersect. 
If the two linked lists have no intersection at all, return null.

#1 BruteForce {N*M ,1}

take one node from ll1 and search for it in ll2.
-------------------------------------------------------------------------------------------------------------------------
#2 {N+M, N/M}

store one ll in hash map and search for elements in other ll in hashmap/hashset
-------------------------------------------------------------------------------------------------------------------------

#3 {N+M , 1}

l1=len(ll1), l2=len(ll2)
take diff of l1,l2 and start the tarversal(comparing) of nodes from same level by starting pos of bigger ll from (l1-l2)
-------------------------------------------------------------------------------------------------------------------------

#4 {N+M ,1}

class Solution {
public:
    ListNode *getIntersectionNode(ListNode *head1, ListNode *head2) {
        if(head1==NULL or head2==NULL) return NULL;
        ListNode* p1=head1;
        ListNode* p2=head2;
        while(p1!=p2){
            p1=p1==NULL?head2:p1->next;
            p2=p2==NULL?head1:p2->next;
        }
        return p1;
    }
};
----------------------------------------------------------------------------------------------------------------------------
