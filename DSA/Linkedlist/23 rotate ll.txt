Given the head of a linked list, rotate the list to the right by k places.
Input: head = [1,2,3,4,5], k = 2
Output: [4,5,1,2,3]
Example 2:

Input: head = [0,1,2], k = 4
Output: [2,0,1]

Constraints:

The number of nodes in the list is in the range [0, 500].
-100 <= Node.val <= 100
0 <= k <= 2 * 109
------------------------------------------------------------------------------------------------------
#1 {N*k, 1}
goto last node of ll everytime and add it to first.

------------------------------------------------------------------------------------------------------
#2 {N , 1}

class Solution {
public:
    ListNode* rotateRight(ListNode* head, int k) {
        if(head==NULL or head->next==NULL or k==0) return head;
        int len=1;
        ListNode*cur=head;
        while(cur->next!=NULL){
            cur=cur->next;
            len++;
        }
        cur->next=head;
        k=k%len;
        k=len-k;
        while(k--) cur=cur->next;
        head=cur->next;
        cur->next=NULL;
        return head;
    }
};
---------------------------------------------------------------------------------------------------------
