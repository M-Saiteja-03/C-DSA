You are given two non-empty linked lists representing two non-negative integers. 
The digits are stored in reverse order, and each of their nodes contains a single digit.
Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example 1:

Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.
Example 2:

Input: l1 = [0], l2 = [0]
Output: [0]
Example 3:

Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]
 

Constraints:

The number of nodes in each linked list is in the range [1, 100].
0 <= Node.val <= 9
It is guaranteed that the list represents a number that does not have leading zeros.
-------------------------------------------------------------------------------------------------------------------
#1 {M+N , max(M,N)}

class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* h1=l1;
        ListNode* h2=l2;
        int carry=0,sum=0;
        ListNode* ansh=new ListNode(-1);
        ListNode* anst=ansh;
        while(h1!=NULL or h2!=NULL or carry!=0){
            int val1=0;
            if(h1!=NULL) val1=h1->val;
            int val2=0;
            if(h2!=NULL) val2=h2->val;
            sum=val1+val2+carry;
            int digit=sum%10;

            ListNode* ansNode=new ListNode(digit);
            anst->next=ansNode;
            anst=ansNode;

            carry=sum/10;

            if(h1!=NULL) h1=h1->next;
            if(h2!=NULL) h2=h2->next;
        }
        return ansh->next;
    }
};
--------------------------------------------------------------------------------------------------------------