You are given an array prices where prices[i] is the price of a given stock on the ith day.

You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the 
future to sell that stock.

Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transactions are done and the max profit = 0.

1 <= prices.length <= 105
0 <= prices[i] <= 104

//BruteForce--O(N^2)

//optimized

if iam at ith index and want to sell the stock..I keep track of the min price thet I have bought the stock till index i 
and will check my profit = ar[i]-mini an i will update my ans variable at each i to get max profit (i.e)
ans=max(ans,profit)

//code
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int m=INT_MAX;
        int maxprofit=INT_MIN;
        int n=prices.size();
        for(int i=0;i<n;i++){
            m=min(m,prices[i]);
            int profit=prices[i]-m;
            maxprofit=max(maxprofit,profit);
        }
        return maxprofit;
    }

};
