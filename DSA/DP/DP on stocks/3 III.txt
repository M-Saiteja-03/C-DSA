You are given an array prices where prices[i] is the price of a given stock on the ith day.

Find the maximum profit you can achieve. You may complete at most two transactions.

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

Input: prices = [3,3,5,0,0,3,1,4]
Output: 6
Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.
Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.

Input: prices = [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
Note that you cannot buy on day 1, buy on day  2 and sell them later, as you are engaging multiple transactions at the same time.
You must sell before buying again.

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transaction is done, i.e. max profit = 0.

//recursion + memoization

->In the previous problem,if we are at ith index we can only buy or sell the stock based on previous transactions of [0...i-1] i.e if we bought a stock in [0..i-1]
  we cant buy a stock now and we should definitely sell this or move forward and perform infinite transactions.
->here, we have to perform at max 2 trans.. so we also keep track of count of trans by another var which becomes 3d dp.

//code
class Solution {
public:
    int f(vector<int>& prices,int i,int buy,int c,vector<vector<vector<int>>> &dp){
        if(c==0) return 0;
        if(i==prices.size()) return 0;
        int profit=0;
        if(dp[i][buy][c]!=-1) return dp[i][buy][c];
        if(buy){
            profit=max(-prices[i]+f(prices,i+1,0,c,dp),0+f(prices,i+1,1,c,dp));
        }
        else{
            profit=max(+prices[i]+f(prices,i+1,1,c-1,dp),0+f(prices,i+1,0,c,dp));
        }
        return dp[i][buy][c]=profit;
    }
    int maxProfit(vector<int>& prices) {
        int n=prices.size();
        vector<vector<vector<int>>> dp(n,vector<vector<int>>(2,vector<int>(3,-1)));
        return f(prices,0,1,2,dp);
    }
};
                                                                                            buy sell  buy sell
we can convert 3d dp into 2d by merging buy and c variables i.e by making dp[N][4] where 4--0    1    2    3   --> 2 transactions
now the code becomes:-
class Solution {
public:
    int f(vector<int>& prices,int i,int t,vector<vector<int>> &dp){
        if(t==4) return 0;
        if(i==prices.size()) return 0;
        int profit=0;
        if(dp[i][t]!=-1) return dp[i][t];
        if(t%2==0){
            profit=max(-prices[i]+f(prices,i+1,t+1,dp),0+f(prices,i+1,t,dp));
        }
        else{
            profit=max(+prices[i]+f(prices,i+1,t+1,dp),0+f(prices,i+1,t,dp));
        }
        return dp[i][t]=profit;
    }
    int maxProfit(vector<int>& prices) {
        int n=prices.size();
        vector<vector<int>> dp(n,vector<int>(4,-1));
        return f(prices,0,0,dp);
    }
};
