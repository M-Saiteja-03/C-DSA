 Largest Divisible Subset

 Given a set of distinct positive integers nums, return the largest subset answer such that every pair (answer[i], answer[j]) of elements in this subset satisfies:

answer[i] % answer[j] == 0, or
answer[j] % answer[i] == 0
If there are multiple solutions, return any of them.

Input: nums = [1,2,3]
Output: [1,2]
Explanation: [1,3] is also accepted.

Input: nums = [1,2,4,8]
Output: [1,2,4,8]

Constraints:

1 <= nums.length <= 1000
1 <= nums[i] <= 2 * 109
All the integers in nums are unique

//code

1.sort the array to follow pattern of LIS
2.since it is given as any subset we can submit, we should get the idea of backracking and generarting 
  subset/Subsequence
2.replace the condition (nums[i]%nums[j]==0 && 1+dp[j]>dp[i]) instead of if(nums[j]<nums[i] && 1+dp[j]>dp[i]) 
  and track the hash array
3.nums[i]%nums[j]==0--> follows tarnsitive property i.e it is enough to check whether current ele is divisible by 
  previous element or not as the previous element is only added when it divisible by its prev element. 
  So the current element will also be divisible by its prev prev element.

//code

class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        int n=nums.size();
        vector<int> dp(n,1);
        vector<int> hash(n,0);
        int maxi=1;
        int hidx=0;
        sort(nums.begin(),nums.end());
        for(int i=0;i<n;i++){
            hash[i]=i;
            for(int j=0;j<i;j++){
                if(nums[i]%nums[j]==0 && 1+dp[j]>dp[i]){
                    dp[i]=1+dp[j];
                    hash[i]=j;
                }
            }
            if(dp[i]>maxi){
                maxi=dp[i];
                hidx=i;
            }
        }
        vector<int> temp;
        while(hash[hidx]!=hidx){
            temp.push_back(nums[hidx]);
            hidx=hash[hidx];
        }
        temp.push_back(nums[hidx]);
        reverse(temp.begin(),temp.end());
        return temp;
    }
};
