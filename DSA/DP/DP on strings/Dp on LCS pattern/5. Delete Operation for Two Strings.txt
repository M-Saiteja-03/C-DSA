Given two strings word1 and word2, return the minimum number of steps required to make word1 and word2 the same.

In one step, you can delete/insert exactly one character in either string.

Input: word1 = "sea", word2 = "eat"
Output: 2
Explanation: You need one step to make "sea" to "ea" and another step to make "eat" to "ea".

Input: word1 = "leetcode", word2 = "etco"
Output: 4

//solution

maximum no.of operations required is deleting entire string and inserting all elements of str2 to str1(n+m)

min no.of operations required is return ((n+m)-2*lcs);

class Solution {
public:
    int minDistance(string word1, string word2) {
        int n=word1.size();
        int m=word2.size();
        vector<vector<int>> dp(n+1,vector<int>(m+1,0));
        int lcs=0;
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                if(word1[i-1]==word2[j-1]){
                    dp[i][j]=1+dp[i-1][j-1];
                }
                else{
                    dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
                }
            }
        }
        lcs=dp[n][m];
        return ((n+m)-2*lcs);
    }
};
