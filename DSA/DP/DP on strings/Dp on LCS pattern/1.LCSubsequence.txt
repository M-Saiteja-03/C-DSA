//Brute Force
//recursion without memo TC:-O(2^n*2^m)

//memoization
class Solution {
public:
    int f(int i1,int i2,vector<vector<int>>& dp,string &text1, string &text2){
        if(i1<0 or i2<0){
            return 0;
        }
        if(dp[i1][i2]!=-1) return dp[i1][i2];
        if(text1[i1]==text2[i2]){
            return dp[i1][i2]=1+f(i1-1,i2-1,dp,text1,text2);
        }
        int pos1=f(i1-1,i2,dp,text1,text2);
        int pos2=f(i1,i2-1,dp,text1,text2);
        return dp[i1][i2]=max(pos1,pos2);
    }
    int longestCommonSubsequence(string text1, string text2) {
        int n1=text1.size();
        int n2=text2.size();
        vector<vector<int>> dp(n1,vector<int>(n2,-1));
        return f(n1-1,n2-1,dp,text1,text2);
    }
};

//tabulation
#include<bits/stdc++.h>
int lcs(string s, string t)
{
	int n=s.size();
	int m=t.size();
	vector<vector<int>> dp(n+1,vector<int>(m+1,0));
	for(int i=1;i<=n;i++){
		for(int j=1;j<=m;j++){
			if(s[i-1]==t[j-1]){
				dp[i][j]=1+dp[i-1][j-1];
			}
			else{
				dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
			}
		}
	}
	return dp[n][m];
}