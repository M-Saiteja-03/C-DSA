
//bruteForce:-TC- O(n^2logn) SC-O(N^2);

// int getKthLargest(vector<int> &arr, int k)
// {
// 	vector<int> res;
//     priority_queue<int,vector<int>,greater<int>> pq;
//     int sum;
//     for(int i=0;i<arr.size();i++){
//         sum=0;
//         for(int j=i;j<arr.size();j++){
//             sum=sum+arr[j];
//             res.push_back(sum);
//         }
//     }
//      sort(res.begin(),res.end(),greater<int>());
//      if(k>res.size()){
//          return res[res.size()-1];
//      }
//      else{
//          return res[k-1];
//      }
// }


//optimized using min heap- TC- O(N^2logk)  SC-O(k);


// int getKthLargest(vector<int> &arr, int k)
// {
//     priority_queue<int,vector<int>,greater<int>> pq;
//     int sum;
//     for(int i=0;i<arr.size();i++){
//         sum=0;
//         for(int j=i;j<arr.size();j++){
//             sum=sum+arr[j];
//             if(pq.size()<k){
//                 pq.push(sum);
//             }
//             else{
//                 if(sum>pq.top()){
//                     pq.pop();
//                     pq.push(sum);
//                 }
//             }
//         }
//     }
//     return pq.top();
// } 