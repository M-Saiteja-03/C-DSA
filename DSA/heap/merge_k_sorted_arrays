//BruteForce Approach:-
//TC- O(N*Klog(N*K))  SC-O(1);

// vector<int> mergeKSortedArrays(vector<vector<int>>&kArrays, int k)
// {

//    vector<int> sortedArray;
//     int maxl=kArrays[0].size();
//     for(int i=1;i<kArrays.size();i++){
//         if(kArrays[i].size()>maxl){
//             maxl=kArrays[i].size();
//         }
//     }
//    for (int i = 0; i < kArrays.size(); i++) {
//        for (int j = 0; j < maxl; j++) {
//            if(j<kArrays[i].size()){
//                sortedArray.push_back(kArrays[i][j]);
//            }
//        }
//    }
//    sort (sortedArray.begin(), sortedArray.end());
//    return sortedArray;

    
// }




// optimal approach using min heap:
// TC - O(n*klogk) SC-O(k)

// #include<bits/stdc++.h>
// class data{
//     public:
//     int val;
//     int arrpos;
//     int elepos;
//     data(int v,int ap,int ep){
//         val=v;
//         arrpos=ap;
//         elepos=ep;
//     }
// };
// struct myComp{
//     bool operator()(data &d1,data &d2){
//        return d1.val > d2.val;
//     }
// };

// vector<int> mergeKSortedArrays(vector<vector<int>>&kArrays, int k)
// {
//     vector<int> res;
//     priority_queue<data,vector<data>,myComp> pq;
//     for(int i=0;i<k;i++){
//         data d(kArrays[i][0],i,0);
//         pq.push(d);
//     }
//     while(!pq.empty()){
//         data curr=pq.top();
//         pq.pop();
//         res.push_back(curr.val);
//         int ap=curr.arrpos;
//         int ep=curr.elepos;
//         if(ep+1<kArrays[ap].size()){
//             data d(kArrays[ap][ep+1],ap,ep+1);
//             pq.push(d);
//         }
//     }
//    return res;
    
// }